== Intermediate Code

In our compiler, programs are turned into a low-level intermediate
code.  This is actually similar to how Python works.   This 
document briefly describes how it works in Python.  You might
use this as a guide for your own compiler.

=== Python Machine Code

When you write Python functions, they get compiled down to a low-level
interpreter machine code.   You can view the code using the `dis` module.
Try it::

----
>>> def foo():				    
        return a + 2*b - 3*c			    

>>> import dis  				    
>>> dis.dis(foo)				    
  2           0 LOAD_GLOBAL              0 (a)	    
              3 LOAD_CONST               1 (2)	    
              6 LOAD_GLOBAL              1 (b)	    
              9 BINARY_MULTIPLY     		    
             10 BINARY_ADD          		    
             11 LOAD_CONST               2 (3)	    
             14 LOAD_GLOBAL              2 (c)	    
             17 BINARY_MULTIPLY     		    
             18 BINARY_SUBTRACT     		    
             19 RETURN_VALUE        		    
>>>
----

Python's machine code is based on a simple stack machine. To carry out operations, operands
are first pushed onto a stack.  Different operations then consume entries on the stack
and replace the top entry with the result.  Here is an example of manually running a
calculation::

----
>>> # Evaluate a = 1 + 2*3 - 4*5  using a stack machine
>>> stack = []
>>> stack.append(1)
>>> stack.append(2)
>>> stack.append(3)
>>> stack
[1, 2, 3]
>>> stack[-2:] = [stack[-2] * stack[-1]]
>>> stack
[1, 6]
>>> stack[-2:] = [stack[-2] + stack[-1]]
>>> stack
[7]
>>> stack.append(4)
>>> stack.append(5)
>>> stack
[7, 4, 5]
>>> stack[-2:] = [stack[-2] * stack[-1]]
>>> stack
[7, 20]
>>> stack[-2:] = [stack[-2] - stack[-1]]
>>> stack
[-13]
>>> a = stack.pop()
>>> a
 -13
>>>
----

=== Turning a Python AST into Instructions

Python programs are internally represented by an abstract syntax tree.
Here's an example of how to create and view the tree:

----
>>> import ast
>>> top = ast.parse("a + 2*b - 3*c")
>>> print(ast.dump(top))
Module(body=[Expr(value=BinOp(left=BinOp(left=Name(id='a',ctx=Load()), 
             op=Add(), right=BinOp(left=Num(n=2), op=Mult(),
             right=Name(id='b', ctx=Load()))), op=Sub(),
             right=BinOp(left=Num(n=3), op=Mult(), right=Name(id='c',
             ctx=Load()))))])
>>> 
----

To generate code, you can define a so-called "Visitor" class like this:

----
import ast					   
class CodeGenerator(ast.NodeVisitor):		   
    def __init__(self):				   
        self.code = []				   

    def visit_BinOp(self,node):			   
        self.visit(node.left)			   
        self.visit(node.right)			   
        opname = node.op.__class__.__name__	   
        inst = ("BINARY_"+opname.upper(),)	   
        self.code.append(inst)			   

    def visit_Name(self,node):			   
        if isinstance(node.ctx, ast.Load):	   
            inst = ('LOAD_GLOBAL',node.id)		   
        else:					   
            inst = ('Unimplemented',)		   
        self.code.append(inst)			   

    def visit_Num(self,node):			   
        inst = ('LOAD_CONST',node.n)		   
        self.code.append(inst)                     
----

Now, let's use it to generate low-level machine instructions::

----
>>> top = ast.parse("a + 2*b - 3*c")
>>> gen = CodeGenerator()
>>> gen.visit(top)
>>> gen.code
[('LOAD_GLOBAL', 'a'), ('LOAD_CONST', 2), ('LOAD_GLOBAL', 'b'), ('BINARY_MULT',), ('BINARY_ADD',),
 ('LOAD_CONST', 3), ('LOAD_GLOBAL', 'c'), ('BINARY_MULT',), ('BINARY_SUB',)]
>>> for inst in gen.code:
        print(inst)

('LOAD_GLOBAL', 'a')
('LOAD_CONST', 2)
('LOAD_GLOBAL', 'b')
('BINARY_MULT',)
('BINARY_ADD',)
('LOAD_CONST', 3)
('LOAD_GLOBAL', 'c')
('BINARY_MULT',)
('BINARY_SUB',)
>>>
----

Observe: Your generated code from the AST is virtually identical to that
produced by the disassembly of the earlier function.   To fully generate
code, you'd need to flesh out the `CodeGenerator` class so that it 
covers all possible AST nodes, but the overall idea is the same.



