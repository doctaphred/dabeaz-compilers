== Relations and Booleans

Programming languages have operations for relations.  For example:

----
a < b
a <= b
a > b
a >= b
a == b
a != b
----

Relations are different than many other binary operators in that the
result type is a boolean, not the same type as the operands.  For example:

----
>>> a = 2
>>> b = 3
>>> a < b
True
>>> a > b
False
>>>
----

For booleans, there are additional logical operations for `and`,
`or`, and `not`:

----
>>> a < b and a > 0
True
>>> a > b or a < 0
False
>>> not a < b
False
>>>
----

Wabbit uses the syntax `&&`, `||`, and `!` for these operations.

=== Precedence Rules

Relations have lower precedence than other math operators.  For example:

----
>>> 1 + 4 < 3 + 5
True
>>>
----
    
Evaluates as:

----
>>> (1 + 4) < (3 + 5)
True
>>>
----

Boolean operators `and` and `or` have lower precedence than relations:

----
>>> 2 < 3 and 0 < 1
True
>>>
----

Evaluates as:

----
>>> (2 < 3) and (0 < 1)
True
>>>
----

Python allows comparison operators to be chained together:

----
>>> 2 < 3 < 0
False
>>> 2 < 3 > 0
True
>>> 2 < 3 > 0 < 10 > -1
True
>>>
----

Chaining is the same as this:

----
>>> 2 < 3 and 3 < 0
False
>>> 2 < 3 and 3 > 0
True
>>> 2 < 3 and 3 > 0 and 0 < 10 and 10 > -1
True
----

Syntactically, it's a little weird to write things such as `x < y > z`.  
In fact, most programming languages don't permit it.  So, this
is something you might want to disallow in your programming language.
That is, the relations can only be used to compare two values.

=== Short-circuit Evaluation

One thing you might ponder is whether or not you support short-circuit
evaluation of booleans operators `and` and `or`.  In most languages,
evaluation stops once the final result can be determined.  Here's an
example that illustrates:

----
>>> x = 10
>>> (x != 0) or (x / 0)
True
>>>
----

Notice how the division by zero did not take place. Since the first
operand was `True`, there's no need to evaluate the second operand.

You do NOT need to implement short-circuit evaluation in your compiler,
but think about it.  If you think you can add it, do it.

=== Relations in Wabbit

Wabbit supports the following operators:

----
a < b            
a <= b
a > b
a >= b
a == b
a != b
a && b            // Logical and
a || b            // Logical or
!a                // Logical negation
----

In addition, Wabbit has a `bool` data type along with
`true` and `false` literals.  For example:

----
var a bool = true;
var b bool = false;
----

All relations and logical operators always produce a result type of
`bool`. 

With relations, you get more precedence rules.  Here is the precedence
of operators, from lowest to highest:

----
||                     (lowest precedence)
&&
<, <=, >, >=, ==, !=
+, -
*, /
Unary : +, -, !        (highest precedence)
----

If possible, your compiler should not allow chained relations. 
For example:

----
a < b              // OK
a < b < c          // Error
----

The logical-and, logical-or, and logical negation operators always
expect the operands to be of type bool.  Thus, you will need to
account for things like this:

----
var a int = 3;
var b int = 4;

var c bool = (a != 0) || (b != 0);      // OK
var d bool = a || b;                    // ERROR
----

=== IR Code Generation

The IR code specification doesn't provide for bools.  To do it,
booleans should be represented by the integers 0 and 1.  When
generating the IR for relations and other operations, use integer
operations assuming these values.  Note: The IR specification has
operators for bitwise AND and OR on integers.

This mirrors the actual behavior of a CPU.  CPUs don't generally have
a special "bool" datatype or boolean-specific operations. They have
integer operations and integer bit-wise operators for things like AND,
OR, and NOT.

=== LLVM Code Generation

To perform comparisons in LLVM, you need to use the `icmp_signed` and
`fcmp_ordered` methods of the builder.  Here is a guide of how to do
numeric comparisons in LLVM:

Integer compares:

----
builder.icmp_signed('<', left, right, target)   # left < right
builder.icmp_signed('<=', left, right, target)  # left <= right
builder.icmp_signed('>', left, right, target)   # left > right
builder.icmp_signed('>=', left, right, target)  # left >= right
builder.icmp_signed('==', left, right, target)  # left == right
builder.icmp_signed('!=', left, right, target)  # left != right
----

Float compares:
----
builder.fcmp_ordered('<', left, right, target)  # left < right
builder.fcmp_ordered('<=', left, right, target) # left <= right
builder.fcmp_ordered('>', left, right, target)  # left > right
builder.fcmp_ordered('>=', left, right, target) # left >= right
builder.fcmp_ordered('==', left, right, target) # left == right
builder.fcmp_ordered('!=', left, right, target) # left != right
----

All of the above operations return a boolean type `IntType(1)`. 
Depending on how you are doing things, you might need to take the result
and extend it to a 32-bit integer so that it is compatible with the
normal integer type. Use this:

----
builder.zext(value, IntType(32), target)     # Zero-extend value to a new type
----

If you ever need to take an integer and truncate it down to a bool, you can
use this:

----
builder.trunc(value, IntType(1), target)     # Truncate an int to a bool
----

There are a few other instructions you'll also need for boolean
expressions:

----
builder.and_(left, right, target)             # left && right
builder.or_(left, right, target)              # left || right
----

=== Web Assembly Generation

Generating code for relations should be extremely straightforward.  There
are separate op-codes for each kind of comparison as well as AND and OR
instructions.  Review the official WASM specification for the encoding.



